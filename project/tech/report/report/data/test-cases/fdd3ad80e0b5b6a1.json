{
  "uid" : "fdd3ad80e0b5b6a1",
  "name" : "列出课程用例",
  "fullName" : "test_lesson.TestLesson#test_list_lesson[{\"action\":\"list_course\",\"pagenum\":\"a\",\"pagesize\":\"20\"}-{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 82, in handle_list_course\n    pagenum = int(request.param_dict",
  "historyId" : "b951e78d73abf2b8bcff2a1891f99093",
  "time" : {
    "start" : 1593504921967,
    "stop" : 1593504921982,
    "duration" : 15
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
  "statusTrace" : "self = <testcaseTech.test_lesson.TestLesson object at 0x0000021BD3E61668>\ninData = '{\"action\":\"list_course\",\"pagenum\":\"a\",\"pagesize\":\"20\"}'\nrepsData = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-...rse\\n    pagenum = int(request.param_dict[\\'pagenum\\'])\\nValueError: invalid literal for int() with base 10: \\'a\\'\\n\"}'\n\n    @allure.title(\"列出课程用例\")\n    @allure.story(\"列出课程\")\n    @pytest.mark.lesson_list\n    @pytest.mark.parametrize(\"inData,repsData\", get_excelData(\"2-课程模块\", 27, 38, 6, 8))\n    def test_list_lesson(self,inData,repsData):\n        res = LessonClass().list_lesson(self.session,inData)\n>       assert res[\"retcode\"] == json.loads(repsData)[\"retcode\"]\n\ntest_lesson.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nd:\\tools\\python\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nd:\\tools\\python\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000021BD2CC8390>\ns = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-...rse\\n    pagenum = int(request.param_dict[\\'pagenum\\'])\\nValueError: invalid literal for int() with base 10: \\'a\\'\\n\"}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)\n\nd:\\tools\\python\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1593504920701,
      "stop" : 1593504920924,
      "duration" : 223
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1593504922352,
      "stop" : 1593504922353,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "课程模块"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "列出课程"
  }, {
    "name" : "tag",
    "value" : "Lesson"
  }, {
    "name" : "tag",
    "value" : "lesson_list"
  }, {
    "name" : "suite",
    "value" : "test_lesson"
  }, {
    "name" : "subSuite",
    "value" : "TestLesson"
  }, {
    "name" : "host",
    "value" : "DESKTOP-56FBIJE"
  }, {
    "name" : "thread",
    "value" : "21932-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_lesson"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "inData",
    "value" : "'{\"action\":\"list_course\",\"pagenum\":\"a\",\"pagesize\":\"20\"}'"
  }, {
    "name" : "repsData",
    "value" : "'{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 82, in handle_list_course\n    pagenum = int(request.param_dict['pagenum'])\nValueError: invalid literal for int() with base 10: 'a'\n\"}'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "349b709d2f16467f",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593418451072,
        "stop" : 1593418451077,
        "duration" : 5
      }
    }, {
      "uid" : "b1cec4007bf7483b",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593418307412,
        "stop" : 1593418307417,
        "duration" : 5
      }
    }, {
      "uid" : "7907ca14ad9481dd",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593417606038,
        "stop" : 1593417606045,
        "duration" : 7
      }
    }, {
      "uid" : "251681193e90113",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593417058166,
        "stop" : 1593417058172,
        "duration" : 6
      }
    }, {
      "uid" : "aae6267910213510",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415177157,
        "stop" : 1593415177163,
        "duration" : 6
      }
    }, {
      "uid" : "51ed847b96d820fb",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415127250,
        "stop" : 1593415127256,
        "duration" : 6
      }
    }, {
      "uid" : "175f6a243499386",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415081478,
        "stop" : 1593415081482,
        "duration" : 4
      }
    }, {
      "uid" : "7873eec667e7d04b",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415054380,
        "stop" : 1593415054384,
        "duration" : 4
      }
    }, {
      "uid" : "31e1b130e89b943",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415005544,
        "stop" : 1593415005549,
        "duration" : 5
      }
    }, {
      "uid" : "6684a03016438bf0",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593414957946,
        "stop" : 1593414957951,
        "duration" : 5
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "lesson_list", "Lesson" ]
  },
  "source" : "fdd3ad80e0b5b6a1.json",
  "parameterValues" : [ "'{\"action\":\"list_course\",\"pagenum\":\"a\",\"pagesize\":\"20\"}'", "'{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 82, in handle_list_course\n    pagenum = int(request.param_dict['pagenum'])\nValueError: invalid literal for int() with base 10: 'a'\n\"}'" ]
}