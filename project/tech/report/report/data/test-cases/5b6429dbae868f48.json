{
  "uid" : "5b6429dbae868f48",
  "name" : "列出课程用例",
  "fullName" : "test_lesson.TestLesson#test_list_lesson",
  "historyId" : "a58edac98ea7a35d2d38aa51d444075f",
  "time" : {
    "start" : 1593504922020,
    "stop" : 1593504922043,
    "duration" : 23
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
  "statusTrace" : "self = <testcaseTech.test_lesson.TestLesson object at 0x0000021BD4301780>\ninData = '{\"action\":\"list_course\",\"pagenum\":\"1000\",\"pagesize\":\"20\"}'\nrepsData = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-...alized set the \\'\\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\\n\"}'\n\n    @allure.title(\"列出课程用例\")\n    @allure.story(\"列出课程\")\n    @pytest.mark.lesson_list\n    @pytest.mark.parametrize(\"inData,repsData\", get_excelData(\"2-课程模块\", 27, 38, 6, 8))\n    def test_list_lesson(self,inData,repsData):\n        res = LessonClass().list_lesson(self.session,inData)\n>       assert res[\"retcode\"] == json.loads(repsData)[\"retcode\"]\n\ntest_lesson.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nd:\\tools\\python\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nd:\\tools\\python\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000021BD2CC8390>\ns = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-...alized set the \\'\\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\\n\"}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)\n\nd:\\tools\\python\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1593504920701,
      "stop" : 1593504920924,
      "duration" : 223
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1593504922352,
      "stop" : 1593504922353,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "课程模块"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "列出课程"
  }, {
    "name" : "tag",
    "value" : "Lesson"
  }, {
    "name" : "tag",
    "value" : "lesson_list"
  }, {
    "name" : "suite",
    "value" : "test_lesson"
  }, {
    "name" : "subSuite",
    "value" : "TestLesson"
  }, {
    "name" : "host",
    "value" : "DESKTOP-56FBIJE"
  }, {
    "name" : "thread",
    "value" : "21932-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_lesson"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "inData",
    "value" : "'{\"action\":\"list_course\",\"pagenum\":\"1000\",\"pagesize\":\"20\"}'"
  }, {
    "name" : "repsData",
    "value" : "'{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 84, in handle_list_course\n    return JsonResponse(Course.list(pagenum,pagesize))\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\http\\response.py\", line 503, in __init__\n    'In order to allow non-dict objects to be serialized set the '\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\n\"}'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "622dacbd2e0ad85f",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593418451098,
        "stop" : 1593418451104,
        "duration" : 6
      }
    }, {
      "uid" : "f93c51a9a02dbc07",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593418307441,
        "stop" : 1593418307448,
        "duration" : 7
      }
    }, {
      "uid" : "dd336964f8b877af",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593417606078,
        "stop" : 1593417606090,
        "duration" : 12
      }
    }, {
      "uid" : "f9f745ba5b678007",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593417058204,
        "stop" : 1593417058212,
        "duration" : 8
      }
    }, {
      "uid" : "33cc4cc2373d836a",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415177200,
        "stop" : 1593415177210,
        "duration" : 10
      }
    }, {
      "uid" : "f604ce5475783774",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415127285,
        "stop" : 1593415127292,
        "duration" : 7
      }
    }, {
      "uid" : "d7343e9ea2e4ad1c",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415081507,
        "stop" : 1593415081514,
        "duration" : 7
      }
    }, {
      "uid" : "4c321a3d3cbbd3af",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415054408,
        "stop" : 1593415054414,
        "duration" : 6
      }
    }, {
      "uid" : "2842d323c44b0167",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593415005571,
        "stop" : 1593415005579,
        "duration" : 8
      }
    }, {
      "uid" : "28b4092d3683070",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)",
      "time" : {
        "start" : 1593414957984,
        "stop" : 1593414957991,
        "duration" : 7
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "lesson_list", "Lesson" ]
  },
  "source" : "5b6429dbae868f48.json",
  "parameterValues" : [ "'{\"action\":\"list_course\",\"pagenum\":\"1000\",\"pagesize\":\"20\"}'", "'{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 84, in handle_list_course\n    return JsonResponse(Course.list(pagenum,pagesize))\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\http\\response.py\", line 503, in __init__\n    'In order to allow non-dict objects to be serialized set the '\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\n\"}'" ]
}